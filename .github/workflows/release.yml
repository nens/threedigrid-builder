name: Release

on:
  push:
    tags:
      - '*'
  pull_request:  # also build on PRs touching this file
    paths:
      - ".github/workflows/release.yml"
  workflow_dispatch:

jobs:
  build_sdist:
    name: Build sdist
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Build a source tarball
        run: |
          python -m pip install --upgrade pip
          pip install build
          python -m build

      - uses: actions/upload-artifact@v3
        with:
          path: ./dist/*.tar.gz
          retention-days: 5

  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, windows-2019, macos-14]

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - uses: msys2/setup-msys2@v2
        if: matrix.os == 'windows-2019'

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.16.5
        # to supply options, put them in 'env', like:
        env:
          CIBW_SKIP: "pp* *musllinux* cp312" # skips pypy, musllinux and python3.12
          CIBW_ARCHS: auto64  # only 64-bit (convincing CMAKE of 32-bit is a TODO)
          CIBW_ENVIRONMENT_MACOS:
            FC=gfortran-12
          CIBW_BEFORE_ALL: cat WHEEL_LICENSE_POSIX >> LICENSE
          CIBW_BEFORE_ALL_WINDOWS: cat WHEEL_LICENSE_WINDOWS >> LICENSE
          CIBW_BEFORE_BUILD_WINDOWS: pip install delvewheel
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: >-
            delvewheel repair -w {dest_dir}
            --no-mangle "libwinpthread-1.dll" {wheel}
          CIBW_BUILD_VERBOSITY: 1

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl
          retention-days: 5

  publish:
    name: Publish on GitHub and PyPI
    needs: [build_sdist, build_wheels]
    runs-on: ubuntu-latest
    # release on every tag
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/')
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: artifact
          path: dist

      - name: Upload Github release
        uses: softprops/action-gh-release@v1

      - name: Upload Release Assets to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_UPLOAD_TOKEN }}
